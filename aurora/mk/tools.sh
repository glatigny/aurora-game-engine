#!/bin/bash

# Tools to help building Aurora Engine.

# Generates dependencies
# $1 : object extension
# $2 : Output makefile
# Next parameters : parameters to add to g++
function make_dep() {
	OBJEXT="$1"
	OUTFILE="$2"

	IFS=$'\n'

	# Read parameters
	local params=""
	shift 2;PARAM="$1"
	while [ "${PARAM%.cpp}" = "$PARAM" ]; do
		params="$params"$IFS"$PARAM"
		shift;PARAM="$1"
	done

	# Generate the makefile
	rm -f "$OUTFILE"
	while [ -n "$PARAM" ]; do
		g++ $params -MM -MT "${PARAM%.cpp}$OBJEXT" "$PARAM" >> "$OUTFILE"
		shift;PARAM="$1"
	done
}

# Cleans line endings
# Parameters : Files to clean. If the first parameter is a directory, it will be cleaned recursively and remaining parameters are ignored.
function clean_eol() {
	if [ -d "$1" ]; then
		find \! -name "tools.sh" -a \! -path "*build/*" -a \! -path ="*.svn/*" \( -name "Makefile" -o -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.[ix]h" -o -name "*.aod" -o -name "*.aos" -o -name "*.mk" -o -name "*.sh" -o -name "*.glsl" \) | while read f;do
			echo " [EOLCLEAN] $(basename "$f")"
			sed -i -e "s/\\r//g" "$f"
		done
	else
		echo " [EOLCLEAN] $@"
		sed -i -e "s/\\r//g" "$@"
	fi
}

# Filters Makefile.dep generated by g++
# Takes stdin as input.
# $1 : Output file
# $2 : Object file extension
function makedep_filter() {
	if [ "$2" != ".o" ]; then
		sed -e "s/^\\([a-zA-Z0-9_]*\\)\\.o:/\\1$2:/" > "$1"
	else
		cat > "$1"
	fi
}

# Generates <Filter> and <File> tags for vcproj files.
# Takes the sorted file list as input.
# $1 : The top-level path which prefixes all the files (mandatory)
# $2 : The filter to put in <Filter Filter=""> attribute.
function gen_vcproj_filenames() {
	RELATIVE_PATH="$1"
	FILTER="$2"
	IFS=$'\n'
	local dir_files=""
	local subdir=""
	local subdir_files=

	while read -r filename; do
		if [ -z "$filename" ]; then continue; fi
		f="${filename#$RELATIVE_PATH/}"
		if [ "$f" = "$filename" ]; then continue; fi

		if [ "${f/\//}" = "$f" ]; then
			dir_files="$dir_files"$IFS"$f"
		else
			local fdir="${f%%/*}"
			if [ "$fdir" = "$subdir" ]; then
				subdir_files="$subdir_files$filename"$IFS
			else
				[ -n "$subdir" ] && echo -n "${subdir_files}" | output_vcproj_subdir "$RELATIVE_PATH" "$FILTER" "$subdir"
				subdir="$fdir"
				subdir_files="$filename"$IFS
			fi
		fi
	done

	if [ -n "$subdir" ]; then
		[ -n "$subdir" ] && echo -n "${subdir_files}" | output_vcproj_subdir "$RELATIVE_PATH" "$FILTER" "$subdir"
	fi

	for f in $dir_files; do
		if [ -z "$f" ]; then continue; fi
		echo "<File RelativePath=\"${RELATIVE_PATH//\//\\}\\$f\" />"
	done
}

# Internal function for gen_vcproj_filenames
function output_vcproj_subdir() {
	RELATIVE_PATH="$1"
	FILTER="$2"
	SUBDIR="$3"
	echo "<Filter Name=\"$SUBDIR\" Filter=\"$FILTER\">"
	IFS=$'\n'
	gen_vcproj_filenames "$RELATIVE_PATH/$SUBDIR" "$FILTER"
	echo "</Filter>"
}


# Builds a VCPROJ file.
# $1 : The name of the project
# $2 : VCPROJ file to build.
# $3 : Path of the top-level directory.
# $4 : Path of the source directory relative to the top-level directory.
# $5 : Path of the root directory of the aurora engine.
# $6 : Path of the source directory of the aurora engine.
# $7 : Path of the data directory.
function vcproj() {
	PROJECT="$1"
	VCPROJ="$(basename "$2")"
	ROOTPATH="$3"
	SRCPATH="$3/$4"
	AURORA_ROOTPATH="$3/$5"
	AURORA_SRCPATH="$AURORA_ROOTPATH/$6"
	DATAPATH="$3/$7"

	echo "Creating user VCPROJ"
	user_vcproj "$1" "$2"

	echo "Creating $VCPROJ"
	mkdir -p "$(dirname "$2")"
	cd "$(dirname "$2")"


cat > "$VCPROJ" <<-EOF
<?xml version="1.0" encoding="utf-8"?>
<VisualStudioProject
	ProjectType="Visual C++"
	Version="8,00"
	Name="$PROJECT"
	RootNamespace="$PROJECT"
	Keyword="Win32Proj"
	>
	<Platforms>
		<Platform Name="Win32" />
	</Platforms>
	<Configurations>
		<Configuration
			Name="debug|Win32"
			OutputDirectory="\$(ProjectDir)"
		>
			<Tool
				Name="VCPreBuildEventTool"
				CommandLine="&quot;\$(ProjectDir)win32\\make.cmd&quot;"
			/>
			<Tool
				Name="VCCLCompilerTool"
				AdditionalIncludeDirectories="&quot;\$(ProjectDir)win32\\include\\&quot;"
				ForcedIncludeFiles="\$(ProjectDir)aurora\\src\\config.h;\$(ProjectDir)aurora\\src\\aurora_consts.h"
			/>
		</Configuration>
		<Configuration
			Name="final|Win32"
			OutputDirectory="\$(ProjectDir)"
		>
			<Tool
				Name="VCPreBuildEventTool"
				CommandLine="&quot;\$(ProjectDir)win32\\make.cmd&quot; final"
			/>
			<Tool
				Name="VCCLCompilerTool"
				AdditionalIncludeDirectories="&quot;\$(ProjectDir)win32\\include\\&quot;"
				ForcedIncludeFiles="\$(ProjectDir)aurora\\src\\config.h;\$(ProjectDir)aurora\\src\\aurora_consts.h"
			/>
		</Configuration>
		<Configuration
			Name="clean|Win32"
			OutputDirectory="\$(ProjectDir)"
		>
			<Tool
				Name="VCPreBuildEventTool"
				CommandLine="&quot;\$(ProjectDir)win32\\make.cmd&quot; mrproper"
			/>
		</Configuration>
		<Configuration
			Name="Update solution|Win32"
			OutputDirectory="\$(ProjectDir)"
		>
			<Tool
				Name="VCPreBuildEventTool"
				CommandLine="&quot;\$(ProjectDir)win32\\make.cmd&quot; $1"
			/>
		</Configuration>
	</Configurations>
	<Files>
		<Filter
			Name="1. $PROJECT"
			Filter="cpp;c;h;xh;ih"
		>
			<Filter
				Name="1.1. Source files"
				Filter="cpp;c"
			>
EOF
	find "$SRCPATH" -name "*.cpp" -o -name "*.c" -o -name "*.h" ! -path "*.svn/*" | gen_vcproj_filenames "$SRCPATH" "cpp;c;h" >> "$VCPROJ"
cat >> "$VCPROJ" <<- EOF
			</Filter>
			<Filter
				Name="1.2. Extended headers"
				Filter="xh"
			>
EOF
	find "$SRCPATH" -name "*.xh" ! -path "*.svn/*" | gen_vcproj_filenames "$SRCPATH" "xh" >> "$VCPROJ"
cat >> "$VCPROJ" <<- EOF
			</Filter>
			<Filter
				Name="1.3. Shaders"
				Filter="glsl"
			>
EOF
	find "$DATAPATH/glsl" -name "*.glsl" ! -path "*.svn/*" | gen_vcproj_filenames "$DATAPATH/glsl" "glsl" >> "$VCPROJ"
cat >> "$VCPROJ" <<- EOF
			</Filter>
			<Filter
				Name="1.4. Configuration"
				Filter="mk"
			>
				<File RelativePath="$ROOTPATH\\aoe.mk" />
			</Filter>
			<File RelativePath="$ROOTPATH\\Makefile" />
		</Filter>
		<Filter
			Name="2. Aurora"
			Filter="cpp;c;h;xh;ih"
		>
			<Filter
				Name="2.1. Source files"
				Filter="cpp;c"
			>
EOF
	find "$AURORA_SRCPATH" -name "*.cpp" -o -name "*.c" -o -name "*.h" ! -path "*.svn/*" | gen_vcproj_filenames "$AURORA_SRCPATH" "cpp;c;h" >> "$VCPROJ"
cat >> "$VCPROJ" <<- EOF
			</Filter>
			<Filter
				Name="2.3. Extended headers"
				Filter="xh"
			>
EOF
	find "$AURORA_SRCPATH" -name "*.xh" ! -path "*.svn/*" | gen_vcproj_filenames "$AURORA_SRCPATH" "xh" >> "$VCPROJ"
cat >> "$VCPROJ" <<- EOF
			</Filter>
			<Filter
				Name="2.4. Include helpers"
				Filter="ih"
			>
EOF
	find "$AURORA_SRCPATH" -name "*.ih" ! -path "*.svn/*" | gen_vcproj_filenames "$AURORA_SRCPATH" "ih" >> "$VCPROJ"
cat >> "$VCPROJ" <<- EOF
			</Filter>
			<File RelativePath="$AURORA_ROOTPATH\\Makefile" />
		</Filter>
		<Filter
			Name="3. Data"
			Filter="aos;aod;png;ogg"
		>
EOF
		find "$ROOTPATH" \( -name "*.ao[ds]"  -o -name "*.png" -o -name "*.ogg" \) ! -path "*.svn/*" | gen_vcproj_filenames "$ROOTPATH" "mk" >> "$VCPROJ"
cat >> "$VCPROJ" <<- EOF
		</Filter>
		<Filter
			Name="4. Build process"
			Filter="Makefile;mk;cmd"
		>
EOF
	find "$AURORA_ROOTPATH/mk" -type f ! -path "*.svn/*" | gen_vcproj_filenames "$ROOTPATH" "mk" >> "$VCPROJ"
	ls "$ROOTPATH/win32/"*.cmd | gen_vcproj_filenames "$ROOTPATH" "cmd" >> "$VCPROJ"
cat >> "$VCPROJ" <<- EOF
		</Filter>
	</Files>
</VisualStudioProject>
EOF

}

# Generate a .vcproj.user file
# $1 : The name of the VCPROJ
function user_vcproj() {
	PROJECT="$1"
cat > "$2.$USERDOMAIN.$USERNAME.user" <<- EOF
<?xml version="1.0" encoding="UTF-8"?>
<VisualStudioUserFile
	ProjectType="Visual C++"
	Version="8,00"
	ShowAllFiles="false"
	>
	<Configurations>
		<Configuration
			Name="debug|Win32"
			>
			<DebugSettings
				Command="\$(ProjectDir)$PROJECT.exe"
				WorkingDirectory="\$(ProjectDir)"
				CommandArguments=""
				Attach="false"
				DebuggerType="3"
				Remote="1"
				RemoteMachine="2003-VM"
				RemoteCommand=""
				HttpUrl=""
				PDBPath=""
				SQLDebugging=""
				Environment=""
				EnvironmentMerge="true"
				DebuggerFlavor="0"
				MPIRunCommand=""
				MPIRunArguments=""
				MPIRunWorkingDirectory=""
				ApplicationCommand=""
				ApplicationArguments=""
				ShimCommand=""
				MPIAcceptMode=""
				MPIAcceptFilter=""
			/>
		</Configuration>
		<Configuration
			Name="final|Win32"
			>
			<DebugSettings
				Command="\$(ProjectDir)$PROJECT.exe"
				WorkingDirectory="\$(ProjectDir)"
				CommandArguments=""
				Attach="false"
				DebuggerType="3"
				Remote="1"
				RemoteMachine="2003-VM"
				RemoteCommand=""
				HttpUrl=""
				PDBPath=""
				SQLDebugging=""
				Environment=""
				EnvironmentMerge="true"
				DebuggerFlavor=""
				MPIRunCommand=""
				MPIRunArguments=""
				MPIRunWorkingDirectory=""
				ApplicationCommand=""
				ApplicationArguments=""
				ShimCommand=""
				MPIAcceptMode=""
				MPIAcceptFilter=""
			/>
		</Configuration>
		<Configuration
			Name="clean|Win32"
			>
			<DebugSettings
				Command="\$(ProjectDir)$PROJECT.exe"
				WorkingDirectory="\$(ProjectDir)"
				CommandArguments=""
				Attach="false"
				DebuggerType="3"
				Remote="1"
				RemoteMachine="2003-VM"
				RemoteCommand=""
				HttpUrl=""
				PDBPath=""
				SQLDebugging=""
				Environment=""
				EnvironmentMerge="true"
				DebuggerFlavor=""
				MPIRunCommand=""
				MPIRunArguments=""
				MPIRunWorkingDirectory=""
				ApplicationCommand=""
				ApplicationArguments=""
				ShimCommand=""
				MPIAcceptMode=""
				MPIAcceptFilter=""
			/>
		</Configuration>
		<Configuration
			Name="Update solution|Win32"
			>
			<DebugSettings
				Command="\$(ProjectDir)$PROJECT.exe"
				WorkingDirectory="\$(ProjectDir)"
				CommandArguments=""
				Attach="false"
				DebuggerType="3"
				Remote="1"
				RemoteMachine="2003-VM"
				RemoteCommand=""
				HttpUrl=""
				PDBPath=""
				SQLDebugging=""
				Environment=""
				EnvironmentMerge="true"
				DebuggerFlavor=""
				MPIRunCommand=""
				MPIRunArguments=""
				MPIRunWorkingDirectory=""
				ApplicationCommand=""
				ApplicationArguments=""
				ShimCommand=""
				MPIAcceptMode=""
				MPIAcceptFilter=""
			/>
		</Configuration>
	</Configurations>
</VisualStudioUserFile>
EOF
}

function make_font() {

if ! [ -e "$1" ]; then
	echo "make_font: $1: File not found."
	echo "Usage: make_font <pngfile> <width>:<height> <glyph_width> <x_offset> <baseline_offset>"
	exit 1
fi

PNG="$1"
FONT="${PNG%.png}"
AOD="$FONT.aod"
WIDTH="$2"
HEIGHT="${WIDTH##*:}"
WIDTH="${WIDTH%%:*}"
GLYPHWIDTH="$3"
X_OFFSET="$4"
BASELINE="$5"

cat > "$AOD" <<-EOF
<BitmapFont id="$FONT" fontHeight="$HEIGHT">
<!-- Automatically generated by "tools.sh make_font" -->

<defaultImage>
	<Frame texture="$PNG" />
</defaultImage>

<images>
	<Decoration name="0" /> <!-- Space has no image. Putting a dummy one.-->
</images>

<offsets>
EOF

for((l=2;l<8;l++)); do
	for((c=0;c<16;c++)); do
		charid="$(( (($l-2)*16) + $c ))"
		echo "	<o name=\"$charid\" value=\"$(($c * $WIDTH)):$(($l * $HEIGHT)):$WIDTH:$HEIGHT\" />" >> "$AOD"
	done
done

cat >> "$AOD" <<-"EOF"
</offsets>

<metrics>
EOF

for((l=2;l<8;l++)); do
	for((c=0;c<16;c++)); do
		charid="$(( (($l-2)*16) + $c ))"
		echo "	<m name=\"$charid\" value=\"$X_OFFSET:$(($BASELINE - ($HEIGHT/2))):$GLYPHWIDTH:$HEIGHT\" />" >> "$AOD"
	done
done

cat >> "$AOD" <<-"EOF"
</metrics>

<codePoints>
EOF

for((l=2;l<8;l++)); do
	for((c=0;c<16;c++)); do
		charid="$(( (($l-2)*16) + $c ))"
		echo "	<code name=\"$(( ($l*16) + $c))\" value=\"$charid\" />" >> "$AOD"
	done
done

cat >> "$AOD" <<-"EOF"
</codePoints>

</BitmapFont>
EOF
}

function dosdevices() {
	if ! [ -e "win32/build/dosdevices/c:" ] && [ -d win32/build/dosdevices ]; then
		ln -s ../drive_c win32/build/dosdevices/c:
	fi

	if ! [ -e "win32/build/dosdevices/z:" ] && [ -d win32/build/dosdevices ]; then
		ln -s / win32/build/dosdevices/z:
	fi
}

# Start the wanted function
if [ -n "$1" ]; then
	FCT="$1"
	shift
	"$FCT" "$@"
fi

